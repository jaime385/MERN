{"version":3,"sources":["components/clock.tsx","components/NavBar.tsx","components/dateInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Clock","this","setState","time","Date","tick","setInterval","state","toLocaleTimeString","Component","AppNavbar","isOpen","toggle","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","link","React","Calendar","useState","startDate","setStartDate","selected","onChange","date","onSelect","words","JSON","stringify","console","log","year","substr","month","day","fetch","then","res","json","data","backgroundImage","url","msg","alert","image","document","getElementsByTagName","namedItem","style","backgroundUrl","setProperty","copyright","getElementById","innerHTML","explanation","title","catch","error","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4b1d4fd5.chunk.js","sourcesContent":["import React, { Component } from 'react'; // let's also import Component\r\n\r\n// the clock's state has one field: The current time, based upon the\r\n// JavaScript class Date\r\ntype ClockState = {\r\n  time: Date;\r\n};\r\n\r\n// Clock has no properties, but the current state is of type ClockState\r\n// The generic parameters in the Component typing allow to pass props\r\n// and state. Since we don't have props, we pass an empty object.\r\nexport default class Clock extends Component<{}, ClockState> {\r\n  // The tick function sets the current state. TypeScript will let us know\r\n  // which ones we are allowed to set.\r\n  tick() {\r\n    this.setState({\r\n      time: new Date(),\r\n    });\r\n  }\r\n\r\n  // Before the component mounts, we initialise our state\r\n  componentWillMount() {\r\n    this.tick();\r\n  }\r\n\r\n  // After the component did mount, we set the state each second.\r\n  componentDidMount() {\r\n    setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  // render will know everything!\r\n  render() {\r\n    return <p>Time: {this.state.time.toLocaleTimeString()}</p>;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Clock from './clock';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Container,\r\n} from 'reactstrap';\r\n\r\nclass AppNavbar extends React.Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n  toggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n        <Container>\r\n          <NavbarBrand href=\"/\">\r\n            <Clock></Clock>\r\n          </NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle}></NavbarToggler>\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink link=\"https://github.com/\">\r\n                  <a href=\"https://github.com/jaime385\">GitHub</a>\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppNavbar;\r\n","import React, { useState } from 'react';\r\nimport Datepicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst Calendar = () => {\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  //const [copy, setCopyright] = useState('Copyright: ');\r\n\r\n  const handleChange = (date: any) => {\r\n    setStartDate(date);\r\n  };\r\n\r\n  const handleSelect = (date: any) => {\r\n    const words = JSON.stringify(date);\r\n    console.log(words);\r\n    //string.substr(start, length)\r\n    const year = words.substr(1, 4);\r\n    const month = words.substr(6, 2);\r\n    const day = words.substr(9, 2);\r\n    console.log(year, month, day);\r\n    fetch(\r\n      `https://api.nasa.gov/planetary/apod?api_key=bGWc0YWQGd5QM3f5HEYlddNpl06U7hIhaI0jRD0E&date=${year}-${month}-${day}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        const backgroundImage = data.url;\r\n        console.log(data, data.msg);\r\n        if (data.msg) {\r\n          alert(data.msg);\r\n        } else {\r\n          var image: any = document\r\n            .getElementsByTagName('div')\r\n            .namedItem('viewer')?.style;\r\n          const backgroundUrl = `url('${backgroundImage}')`;\r\n          image.setProperty('background-image', backgroundUrl);\r\n          if (data.copyright) {\r\n            //Showing picture's author.\r\n            const nameCopyright: HTMLElement = document.getElementById(\r\n              'infoCopy'\r\n            ) as HTMLElement;\r\n            nameCopyright.innerHTML = `Copyright: ${data.copyright}`;\r\n          } else {\r\n            //Picture has got no author..\r\n            const nameCopyright: HTMLElement = document.getElementById(\r\n              'infoCopy'\r\n            ) as HTMLElement;\r\n            nameCopyright.innerHTML = `Copyright: NASA`;\r\n          }\r\n          if (data.explanation) {\r\n            //Showing picture's info.\r\n            const picturesInfo: HTMLElement = document.getElementById(\r\n              'explanation'\r\n            ) as HTMLElement;\r\n            picturesInfo.innerHTML = `${data.explanation}`;\r\n          }\r\n          if (data.title) {\r\n            //Showing picture's name.\r\n            const picturesName: HTMLElement = document.getElementById(\r\n              'title'\r\n            ) as HTMLElement;\r\n            picturesName.innerHTML = `${data.title}`;\r\n          }\r\n        }\r\n      })\r\n      .catch(console.error);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dataFrame\">\r\n      <div>\r\n        <br></br>\r\n      </div>\r\n      <div className=\"calendarInput\">\r\n        <h1 className=\"apodExplorerTitle\">APOD Explorer</h1>\r\n        <label className=\"apodExplorerTitle\">Select a date: </label>\r\n        <Datepicker\r\n          selected={startDate}\r\n          onChange={handleChange}\r\n          onSelect={handleSelect}\r\n        />\r\n      </div>\r\n      <div className=\"copyrightLocation\">\r\n        <h2 id=\"infoCopy\"></h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n\r\n//let elemento = document.getElementsByClassName('viewer');\r\n/*for (var i in elemento) {\r\n          console.log(i, x);\r\n  }*/\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport AppNavbar from './components/NavBar';\r\nimport Calendar from './components/dateInput';\r\n//import DataButton from './components/dataButton';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"gridMaster\">\r\n      <div className=\"NavBar\">\r\n        <AppNavbar></AppNavbar>\r\n      </div>\r\n      <div className=\"viewer\" id=\"viewer\">\r\n        <div className=\"inputDate\">\r\n          <Calendar></Calendar>\r\n        </div>\r\n      </div>\r\n      <div className=\"info\">\r\n        <div className=\"expFromApi\">\r\n          <h1 id=\"title\"></h1>\r\n          <p id=\"explanation\"></p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}